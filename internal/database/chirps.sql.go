// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: chirps.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps(id,body,author_id,created_at,upadated_at) VALUES($1,$2,$3,$4,$5)
RETURNING id, body, author_id, created_at, upadated_at
`

type CreateChirpParams struct {
	ID         int32
	Body       sql.NullString
	AuthorID   uuid.UUID
	CreatedAt  time.Time
	UpadatedAt sql.NullTime
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp,
		arg.ID,
		arg.Body,
		arg.AuthorID,
		arg.CreatedAt,
		arg.UpadatedAt,
	)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpadatedAt,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :one
DELETE FROM chirps WHERE author_id==$1 AND id==$2
RETURNING id, body, author_id, created_at, upadated_at
`

type DeleteChirpParams struct {
	AuthorID uuid.UUID
	ID       int32
}

func (q *Queries) DeleteChirp(ctx context.Context, arg DeleteChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, deleteChirp, arg.AuthorID, arg.ID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpadatedAt,
	)
	return i, err
}

const getChirp = `-- name: GetChirp :one
SELECT id, body, author_id, created_at, upadated_at FROM chirps WHERE author_id==$1 AND id==$2
`

type GetChirpParams struct {
	AuthorID uuid.UUID
	ID       int32
}

func (q *Queries) GetChirp(ctx context.Context, arg GetChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, arg.AuthorID, arg.ID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpadatedAt,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, body, author_id, created_at, upadated_at FROM chirps WHERE chirps.author_id== users.id
ORDER BY chirps.id
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpadatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
