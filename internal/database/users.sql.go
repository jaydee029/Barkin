// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name,Email,passwd,id,created_at,updated_at) VALUES($1,$2,$3,$4,$5,$6)
RETURNING name, email, passwd, id, created_at, updated_at, is_red
`

type CreateUserParams struct {
	Name      string
	Email     string
	Passwd    []byte
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Passwd,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT name, email, passwd, id, created_at, updated_at, is_red FROM users WHERE Email=$1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
	)
	return i, err
}

const is_red = `-- name: Is_red :one
INSERT INTO users(is_red) VALUES($1)
RETURNING name, email, passwd, id, created_at, updated_at, is_red
`

func (q *Queries) Is_red(ctx context.Context, isRed bool) (User, error) {
	row := q.db.QueryRowContext(ctx, is_red, isRed)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name=$2 ,Email=$3 ,passwd=$4 ,updated_at=$5 WHERE id=$1
RETURNING name, email, passwd, id, created_at, updated_at, is_red
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Passwd    []byte
	UpdatedAt time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Passwd,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
	)
	return i, err
}
