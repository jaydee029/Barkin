// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(Email,passwd,id,red,created_at,updated_at) VALUES($1,$2,$3,$4,$5,$6)
RETURNING email, passwd, id, red, created_at, updated_at
`

type CreateUserParams struct {
	Email     string
	Passwd    []byte
	ID        uuid.UUID
	Red       sql.NullBool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Passwd,
		arg.ID,
		arg.Red,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.Red,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, passwd, id, red, created_at, updated_at FROM users WHERE id==$1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.Red,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET Email=$1, passwd=$2 WHERE id==$3
RETURNING email, passwd, id, red, created_at, updated_at
`

type UpdateUserParams struct {
	Email  string
	Passwd []byte
	ID     uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.Passwd, arg.ID)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.Red,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
